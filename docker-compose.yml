version: '3.9'

volumes:
  postgres_data:
  redis_data:
  front_bundle:
  postgres_usr_data:

networks:
  local_area:
    driver: bridge

services:
#  postgres:
#    image: postgres:15.3-alpine
#    container_name: postgres
#    restart: always
#    networks:
#      local_area:
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_DB}
#
#  postgres_usr:
#    image: postgres:15.3-alpine
#    container_name: postgres_usr
#    restart: always
#    networks:
#      local_area:
#    volumes:
#      - postgres_usr_data:/var/lib/postgresql/data
#      - ./init_usr.sql:/docker-entrypoint-initdb.d/init_usr.sql
#    environment:
#      POSTGRES_USER: ${POSTGRES_USR_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_USR_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_USR_DB}

#  auth:
#    container_name: auth
#    build:
#      context: ../backend
#      dockerfile: cmd/auth_service/Dockerfile
#    networks:
#      local_area:
#    restart: unless-stopped
#    env_file:
#      - .env
#    depends_on:
#      postgres_usr:
#        condition: service_started
#      redis:
#        condition: service_started
#    ports:
#      - ${AUTHMS_HTTP_SERVER_PORT}:${AUTHMS_HTTP_SERVER_PORT}
#
#  profile:
#    container_name: profile
#    build:
#      context: ../backend
#      dockerfile: cmd/profile_service/Dockerfile
#    networks:
#      local_area:
#    restart: unless-stopped
#    env_file:
#      - .env
#    depends_on:
#      auth:
#        condition: service_started
#    ports:
#      - ${PROFILEMS_HTTP_SERVER_PORT}:${PROFILEMS_HTTP_SERVER_PORT}
#
#  film_series:
#    container_name: films_series
#    build:
#      context: ../backend
#      dockerfile: cmd/films_series_service/Dockerfile
#    networks:
#      local_area:
#    restart: unless-stopped
#    env_file:
#      - .env
#    depends_on:
#      auth:
#        condition: service_started
#    ports:
#      - ${FILM_SERIES_HTTP_SERVER_PORT}:${FILM_SERIES_HTTP_SERVER_PORT}
#
#  backend:
#    container_name: backend
#    build:
#      context: ../backend
#      dockerfile: cmd/netflix/Dockerfile
#    networks:
#      local_area:
#    restart: unless-stopped
#    env_file:
#      - .env
#    depends_on:
#      auth:
#        condition: service_started
#    ports:
#      - ${SERVER_PORT}:${SERVER_PORT}


#  frontend:
#    container_name: frontend
#    build:
#      context: ../frontend
#      dockerfile: Dockerfile
#    volumes:
#      - front_bundle:/app/bundle

  redis:
    image: redis:6.2-alpine
    container_name: redis
    networks:
      local_area:
    restart: always
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/var/lib/redis/data

  nginx:
    image: nginx:latest
    container_name: nginx
    networks:
      local_area:
    ports:
      - ${APP_PORT}:${APP_PORT}
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - front_bundle:/app/bundle
#    depends_on:
#      backend:
#        condition: service_started

#  grafana:
#    image: grafana/grafana-enterprise
#    networks:
#      local_area:
#    container_name: grafana
#    restart: unless-stopped
#    expose:
#      - 3000
#    ports:
#      - 3000:3000
#
#  prometheus:
#    image: prom/prometheus:latest
#    networks:
#      local_area:
#    container_name: prometheus
#    expose:
#      - 9090
#    command:
#      --config.file=/etc/prometheus/prometheus.yml
#    volumes:
#      - ../backend/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#    ports:
#      - 9090:9090
#
#  node-exporter:
#    image: quay.io/prometheus/node-exporter:latest
#    networks:
#      local_area:
#    restart: unless-stopped
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.rootfs=/rootfs'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
#    expose:
#      - 9100

#  fill_db:
#    build:
#      context: ../backend/cmd/fill_db
#      dockerfile: Dockerfile
#    networks:
#      local_area:
#    container_name: fill_db
#    environment:
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_HOST: ${POSTGRES_HOST}
#      POSTGRES_PORT: ${POSTGRES_PORT}
#
#    depends_on:
#      postgres:
#        condition: service_started


#  postgres_survey:
#    image: postgres:15.3-alpine
#    restart: always
#    networks:
#      local_area:
#    volumes:
#      - postgres_data_survay:/var/lib/postgresql/data
#      - ./init_survey.sql:/docker-entrypoint-initdb.d/init.sql
#    environment:
#      POSTGRES_USER: ${POSTGRES_CSAT_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_CSAT_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_CSAT_DB}
#    ports:
#      - ${POSTGRES_CSAT_PORT}:${POSTGRES_CSAT_PORT}


#  nginx_survey:
#    image: nginx:latest
#    networks:
#      local_area:
#    ports:
#      - 81:81
#    volumes:
#      - ./nginx_survey.conf:/etc/nginx/conf.d/default.conf:ro
#      - front_bundle_survey:/app/bundle_survey
#    depends_on:
#      - backend

#  frontend_survey:
#    build:
#      context: ../hakaton
#      dockerfile: Dockerfile
#    volumes:
#      - front_bundle_survey:/app/bundle

#  survey:
#    build:
#      context: ../backend
#      dockerfile: cmd/survay_service/Dockerfile
#    networks:
#      local_area:
#    restart: unless-stopped
#    env_file:
#      - .env
#    depends_on:
#      postgres_survey:
#        condition: service_started
#    ports:
#      - ${SURVAYMS_HTTP_SERVER_PORT}:${SURVAYMS_HTTP_SERVER_PORT}
