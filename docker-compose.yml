version: '3.9'

volumes:
  postgres_data:
  redis_data:
  front_bundle:

networks:
  local_area:
    driver: bridge

services:
  postgres:
    image: postgres:15.3-alpine
    restart: always
    networks:
      local_area:
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

  #  auth:
  #    build:
  #      context: ../backend
  #      dockerfile: cmd/auth_service/Dockerfile
  #    networks:
  #      local_area:
  #    restart: unless-stopped
  #    env_file:
  #      - .env
  #    depends_on:
  #      postgres:
  #        condition: service_started
  #      redis:
  #        condition: service_started
  #      frontend:
  #        condition: service_completed_successfully
  #    ports:
  #      - ${AUTHMS_HTTP_SERVER_PORT}:${AUTHMS_HTTP_SERVER_PORT}

  auth:
    build:
      context: ../2023_2_Holi/
      dockerfile: cmd/auth_service/Dockerfile
    networks:
      local_area:
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
#      frontend:
#        condition: service_completed_successfully
    ports:
      - ${AUTHMS_HTTP_SERVER_PORT}:${AUTHMS_HTTP_SERVER_PORT}

#  backend:
#    build:
#      context: ../2023_2_Holi/
#      dockerfile: cmd/netflix/Dockerfile
#    networks:
#      local_area:
#    restart: unless-stopped
#    env_file:
#      - .env
#    depends_on:
#      postgres:
#        condition: service_started
#      redis:
#        condition: service_started
##      frontend:
##        condition: service_completed_successfully
#    ports:
#      - ${SERVER_PORT}:${SERVER_PORT}

#  frontend:
#    build:
#      context: ../front/2023_2_Holi
#      dockerfile: Dockerfile
#    volumes:
#      - front_bundle:/app/bundle


  redis:
    image: redis:6.2-alpine
    networks:
      local_area:
    restart: always
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/var/lib/redis/data

#  nginx:
#    image: nginx:latest
#    networks:
#      local_area:
#    ports:
#      - ${APP_PORT}:${APP_PORT}
#    volumes:
#      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
#      - front_bundle:/app/bundle
#    depends_on:
#      - backend

  grafana:
    image: grafana/grafana-enterprise
    networks:
      local_area:
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'

  prometheus:
    image: prom/prometheus:latest
    networks:
      local_area:
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ../2023_2_Holi/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    networks:
      local_area:
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100

#  fill_db:
#    build:
#      context: ../2023_2_Holi
#      dockerfile: cmd/fill_db/Dockerfile
#    networks:
#      local_area:
#    environment:
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_HOST: ${POSTGRES_HOST}
#      POSTGRES_PORT: ${POSTGRES_PORT}
#
#    depends_on:
#      postgres:
#        condition: service_started
#


